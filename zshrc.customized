# Prepend a path to the PATH.
function prependtopath {
    PATH_TO_ADD=$1
    if [ -d $PATH_TO_ADD ]; then
        export PATH=$PATH:$PATH_TO_ADD
        return 0
    else
        echo "[ERROR] .zshrc: Asked to add $PATH_TO_ADD to the path, but the directory does not exist" 1>&2
        return 1
    fi
}

# Prepend a path to the PATH.
function appendtopath {
    PATH_TO_ADD=$1
    if [ -d $PATH_TO_ADD ]; then
        export PATH=$PATH_TO_ADD:$PATH
        return 0
    else
        echo "[ERROR] .zshrc: Asked to add $PATH_TO_ADD to the path, but the directory does not exist" 1>&2
        return 1
    fi
}

# Color a pattern like grep, but do not filter.
function cgrep {
  egrep --color=auto "$@|^"
}

# Swap two files.
function swap()
{
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE && mv "$2" "$1" && mv $TMPFILE $2
}

# Command for creating a temporary directory and moving to it.
function cdtemp {
  TMP_DIR=`mktemp -d`
  export TMP_LAST_CD=`pwd`
  cd $TMP_DIR
 
  export TMP_LAST=$TMP_DIR
}

# Command for creating a temporary directory and moving to it. Move also the files provided in parameter
function mvtemp {
  TMP_DIR=`mktemp -d`
  if [ "$#" -ne 0 ]; then
    mv $@ $TMP_DIR
  fi
  export TMP_LAST_CD=`pwd`
  cd $TMP_DIR

  export TMP_LAST=$TMP_DIR
}

# Command for creating a temporary directory and moving to it. Copy also the files provided in parameter
function cptemp {
  TMP_DIR=`mktemp -d`
  if [ "$#" -ne 0 ]; then
    cp -R $@ $TMP_DIR
  fi
  export TMP_LAST_CD=`pwd`
  cd $TMP_DIR

  export TMP_LAST=$TMP_DIR
}

# Command for creating a temporary file containing the piped input. A file name can be passed.
function filetemp {
  TMP_FILE=`mktemp`
  if [ "$#" -ne 0 ]; then
    TMP_FILE=/tmp/tmp.$1
  else
    TMP_FILE=`mktemp`
  fi

  PIPE_INPUT=$(cat)
  echo $PIPE_INPUT > $TMP_FILE

  echo $TMP_FILE
}

# Command which deletes the last directory or file created with cdtemp or filetemp.
function rmtemp {
  # Is TMP_LAST set?
  if [ -z ${TMP_LAST+x} ]; then
    echo No history
  else
    # Is TMP_LAST really a valid temporary file or directory?
    if [[ $TMP_LAST == "/tmp/tmp."* ]]; then
      # Is TMP_LAST a file?
      if [ -f "$TMP_LAST" ]; then
        rm -vf $TMP_LAST
      # Is TMP_LAST a directory?
      elif [ -d "$TMP_LAST" ]; then
        # Is TMP_LAST in the working directory?
        if [[ `pwd` == "$TMP_LAST"* ]]; then
          # Is TMP_LAST_CD set?
          if [ -z ${TMP_LAST_CD+x} ]; then
            cd
          else
            cd $TMP_LAST_CD
          fi
        fi
        rm -vrf $TMP_LAST
      else
        echo $TMP_LAST does not exist
      fi
    else
      echo $TMP_LAST is not a valid temporary file or directory
    fi
    unset TMP_LAST
  fi
}

# Command which does the same thing as rmtemp, but close the shell afterwards.
alias exittemp="rmtemp && exit"

# Prompt
if [ $USER = root ]
then
  user="%{\e[1;31m%}%n%{\e[0m%}"
  user_indicator="%{\e[1;37m%}#%{\e[0m%}"
else
  user="%{\e[1;32m%}%n%{\e[0m%}"
  user_indicator="%{\e[1;37m%}\$%{\e[0m%}"
fi

if [ `echo $SSH_CLIENT | awk '{ print $1 }'` ]
then
  host="%{\e[1;33m%}%M%{\e[0m%}"
else
  host="%{\e[1;34m%}%M%{\e[0m%}"
fi

export PS1="$(print $user'@'$host':%~'$user_indicator) "

# Prompt at end of command line : git, cvs, svn (if any), and time
setopt prompt_subst
autoload -Uz vcs_info
zstyle ':vcs_info:*' actionformats \
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats      \
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'

zstyle ':vcs_info:*' enable git cvs svn

# or use pre_cmd, see man zshcontrib
vcs_info_wrapper() {
  vcs_info
  if [ -n "$vcs_info_msg_0_" ]; then
    echo "%{$fg[grey]%}${vcs_info_msg_0_}%{$reset_color%}$del"
  fi
}

RPROMPT=$'$(vcs_info_wrapper) %*'

# Autocorrection :
setopt correctall

# Jump word with CTRL-Left or CTRL-Right
bindkey "^[[1;5D" backward-word
bindkey "^[[1;5C" forward-word

# Backward kill word stops on directory separators
autoload -U select-word-style
select-word-style bash

# Intelligent case insensitive auto completion.
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Useful alias :
alias ls="ls --color=auto"
alias ll="ls -lh"
alias la="ll -A"
alias dir="dir --color=auto"
alias dirl="dir -lh"
alias dira="dirl -A"
alias cp="cp -i"
alias mv="mv -i"

# Populate the PATH
appendtopath /opt/pyth && alias pythdoc="nano /opt/pyth/rev-doc.txt" # Pyth

# Define the file's colors :
LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:";
export LS_COLORS
